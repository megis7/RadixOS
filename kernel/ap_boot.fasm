; This is the execution code for the APs. It is meant to be compiled to flat binary.

; Use xxd to convert to c-style hex array 
; Then memcpy the result to the desired boot memory location

org 0x8000              ; Change this based on where the page of the SIPI is set

                    	; perform standard 16-bit boot procedure
bits 16

jmp start

; arguments required for minimal setup
; must be passed by the BSP upon initialization
; these must stay read-only fields
c_setup_proc:   dd 0						; c code function that continues the setup
gdtr:           dw 0						; common gdt
                dd 0		
gs_entry:       dw 0                        ; entry in the gdt that gs should point to
stack:          dd 0                        ; processor boot stack

start:
    cli
	xor 	ax, ax						; zero segments as we use org directive
	mov     ds, ax
	mov		es, ax
	mov     fs, ax
	mov     gs, ax
				
	mov     ss, ax						; setup a dummy stack
    
    lgdt [gdtr]

    mov eax, cr0						; enter protected mode
    or eax, 1
    mov cr0, eax
    
	jmp 0x08:.reload_segments

bits 32
	.reload_segments:

        mov ax, 0x10
        mov ds, ax
        mov es, ax
        mov fs, ax
        mov ss, ax

        mov esp, dword[stack]

        mov ax, word [gs_entry]
        mov cx, 8
        mul cx
        mov gs, ax                      ; fix gs to point to our core-specific data

        add ax, 8
        or ax, 3
        ltr ax                          ; install the tss entry of each AP

        mov eax, 0x80000                ; load the dummy page directory created when the BSP booted
        mov cr3, eax

        mov eax, cr0                    ; enable paging to be able to jump to kernel space
        or eax, 0x80000000
        mov cr0, eax

    	jmp dword [c_setup_proc]
    cli
    hlt