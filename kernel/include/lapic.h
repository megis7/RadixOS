#ifndef LAPIC_H_15022018
#define LAPIC_H_15022018

#include <types.h>
#include <stddef.h>

enum LAPIC_REGS 
{
    LAPIC_ID = 0x20,
    LAPIC_EOI = 0xB0,
      
    LAPIC_TIMER_DISABLE = 0x10000,      // Write this value to the timer_lvt register to mask the timer
       
    
    LAPIC_ICR_LOW = 0x300,              // Interrupt Command Register
    LAPIC_ICR_HIGH = 0x310,
    LAPIC_TIMER_DIV = 0x3E0,            // Time Divide Configuration Register
    LAPIC_TIMER_INIT = 0x380,           // Initial Timer Count
    LAPIC_TIMER_CUR = 0x390,            // Current Timer Count

    LAPIC_SPURIOUS_INTERRUPT = 0xF0,    // Spurious interrupt register


    /* Local (Interrupt) Vector Table Registers */
    LAPIC_CMCI_LVT = 0x2F0,                 // Hanldes interrupt when some overflow or machine check has happened...  
    LAPIC_TIMER_LVT = 0x320, 
    LAPIC_THERMAL_LVT = 0x330,
    LAPIC_PERFORMANCE_LVT = 0x340,
    LAPIC_LINT0_LVT = 0x350,
    LAPIC_LINT1_LVT = 0x360,
    LAPIC_ERROR_LVT = 0x370                 // Handles delivery of internal error interrupt
};

/* OR these values (set bits 17:18) with the rest of the Timer Register */
enum LAPIC_TIMER_MODE
{
    LAPIC_TIMER_ONE_SHOOT = 0,          // set one shoot mode (b00)
    LAPIC_TIMER_PERIODIC = 0x20000,     // set periodic interrupt mode (b01)
    // TSC-Deadline not used
};

enum LAPIC_ICR
{
    LAPIC_ICR_DELIVERY = 7 << 8,
    LAPIC_ICR_DESTINATION = 1 << 11,
    LAPIC_ICR_PENDING = 1 << 12,                // If this bit is set then an IPI is pending
    LAPIC_ICR_DESTINATION_SHORTHAND_MASK = 3 << 18
};

/* Describes the way a IPI will be sent */
enum LAPIC_ICR_DELIVERY
{
    LAPIC_DELIVERY_FIXED = 0,               // Normal interrupt delivery to the designated processor and vector
    LAPIC_DELIVERY_LOWEST = 1,              // Normal delivery but to lowest priority processor (avoid - is model specific)
    LAPIC_DELIVERY_SMI = 2,
    LAPIC_DELIVERY_NMI = 4,                 // Delivers a NMI to the target processor (the vector number is ignored)
    LAPIC_DELIVERY_INIT = 5,                // Processor init IPI
    LAPIC_DELIVERY_SIPI = 6                 // Processor startup IPI
};

/* Describes the trigger mode of the interrupt */
enum LAPIC_ICR_TRIGGER_MODE 
{
    LAPIC_TRIGGER_EDGE = 0,
    LAPIC_TRIGGER_LEVEL = 1 << 15
};

/* Describes which processors will receive the IPI */
enum LAPIC_ICR_DESTINATION_SHORTHAND
{
    LAPIC_DESTINATION_TARGET = 0,
    LAPIC_DESTINATION_SELF = 1 << 18,
    LAPIC_DESTINATION_ALL = 2 << 18,
    LAPIC_DESTINATION_ALL_BUT_SELF = 3 << 18
};

/* Describes the destination mode to use when sending the IPI */
enum LAPIC_ICR_DESTINATION_MODE
{
    LAPIC_DESTINATION_PHYSICAL = 0,             // Uses the processor ID supplied to find the target processor
    LAPIC_DESTINATION_LOGICAL = 1 << 11         
};

/* Describes the way that a local interrupt will be handled */
enum LAPIC_LVT_DELIVERY
{
    LAPIC_LVT_DELIVERY_FIXED = 0,               // Normal interrupt delivery to the designated vector
    LAPIC_LVT_DELIVERY_SMI = 2, 
    LAPIC_LVT_DELIVERY_NMI = 4,
    LAPIC_LVT_DELIVERY_INIT = 5,
    LAPIC_LVT_DELIVERY_EXT = 7                  // Handle as if local interrupt was generated by external device
};

// enables the lapic so that it can process/send interrupts
void lapic_enable(physical_addr_t base_addr);

// returns the id of the lapic 
uint32_t lapic_get_id(physical_addr_t base_addr);

// sends the End of Interrupt command to the lapic
void lapic_send_eoi(physical_addr_t base_addr);

// send inter-processor interrupt
void lapic_send_ipi(physical_addr_t base_addr, uint8_t target_id, uint8_t target_vector, uint32_t delivery_mode, uint32_t destination_mode, uint32_t destination_shorthand);

// send a standard IPI to a single core (delivery_mode = FIXED, destination_mode = PHYSICAL, destination_shorthand = TARGET)
void lapic_send_ipi_std(physical_addr_t base_addr, uint8_t target_id, uint8_t target_vector);

// send standard IPI to all but current core
void lapic_send_ipi_to_others(physical_addr_t base_addr, uint8_t target_vector);

// calibrates the lapic timer so that it generates an interrupt every given period (calibration uses the PIT - target_period in ms)
void lapic_calibrate_timer(physical_addr_t base_addr, uint32_t target_period, uint8_t irq_vector);

// returns the number of milliseconds passed since the last calibration
volatile uint32_t lapic_millis();

// spin-sleep for 'time' millis using the lapic timer 
void lapic_sleep(uint32_t time);

#endif